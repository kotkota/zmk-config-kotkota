/*
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

// #define DEF 0
// #define LWR 1
// #define RSE 2
// #define ADJ 3

&lt { quick_tap_ms = <200>; };

&mt {
    flavor = "tap-preferred";
    hold-trigger-on-release;
};

/ {
    chosen {
        zmk,matrix_transform = &default_transform;

        // zmk,matrix_transform = &extra_keys_transform;
    };

    combos {
        compatible = "zmk,combos";

        harden_sign {
            bindings = <&kp RBKT>;
            key-positions = <31 32>;
            layers = <0>;
        };

        comma {
            bindings = <&comma_space>;
            key-positions = <26 27>;
            layers = <0>;
        };

        period {
            bindings = <&period_space>;
            key-positions = <27 28>;
            layers = <0>;
        };

        t_game {
            bindings = <&tog 4>;
            key-positions = <35 24>;
            layers = <0 4>;
        };

        ch_lang {
            bindings = <&kp LG(SPACE)>;
            key-positions = <16 17>;
            layers = <0>;
            timeout-ms = <80>;
            require-prior-idle-ms = <100>;
        };

        caps_word {
            bindings = <&caps_word>;
            key-positions = <12 13>;
            timeout-ms = <80>;
            layers = <0>;
        };

        space {
            bindings = <&kp SPACE>;
            key-positions = <28 29>;
            layers = <0>;
        };
    };

    macros {
        comma_space: comma_space {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(LC(COMMA)) &kp SPACE>;
            label = "COMMA_SPACE";
        };

        period_space: period_space {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(LA(PERIOD)) &kp SPACE>;
            label = "PERIOD_SPACE";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&mt LS(LCMD) ESC          &kp Q         &kp W        &kp E            &kp R        &kp T                &kp Y                 &kp U        &kp I            &kp O        &kp P            &mt RBKT LBKT
&mt LA(LC(LS(LCMD))) TAB  &mt LSHIFT A  &mt LCTRL S  &mt LALT D       &mt LCMD F   &mt LA(LC(COMMA)) G  &mt LA(LC(PERIOD)) H  &mt RCMD J   &mt RALT K       &mt RCTRL L  &mt RSHIFT SEMI  &lt 5 APOS
&mt GRAVE CAPS            &kp Z         &kp X        &kp C            &kp V        &kp B                &kp N                 &kp M        &kp COMMA        &kp PERIOD   &kp SLASH        &lt 3 BACKSLASH
                                                     &lt 2 BACKSPACE  &lt 1 SPACE  &mt LCMD ENTER       &mt RCMD ENTER        &lt 1 SPACE  &lt 2 BACKSPACE
            >;

            label = "Default";
        };

        num_layer {
            bindings = <
&trans         &kp N1               &kp N2        &kp N3        &kp N4             &kp N5      &kp PG_UP  &kp LA(LEFT)  &kp UP    &kp LA(RIGHT)  &kp LG(LBKT)  &kp LG(RBKT)
&trans         &mt LSHIFT NUMBER_6  &mt LCTRL N7  &mt LALT N8   &mt LCMD NUMBER_9  &kp N0      &kp PG_DN  &kp LEFT      &kp DOWN  &kp RIGHT      &none         &none
&kp KP_DIVIDE  &kp KP_MULTIPLY      &kp KP_PLUS   &kp KP_MINUS  &kp KP_EQUAL       &kp KP_DOT  &kp HOME   &kp END       &none     &none          &none         &trans
                                                  &trans        &trans             &trans      &trans     &trans        &kp DEL
            >;

            label = "Numbers/Nav";
        };

        symb_layer {
            bindings = <
&kp UNDER     &kp EXCL   &kp AT    &kp HASH   &kp DLLR              &kp PRCNT              &none  &none  &none  &none              &none          &none
&kp LA(SEMI)  &kp CARET  &kp AMPS  &kp ASTRK  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &none  &none  &none  &none              &none          &none
&kp LT        &kp GT     &kp LBKT  &kp RBKT   &kp LEFT_BRACE        &kp RIGHT_BRACE        &none  &none  &none  &kp RS(RA(EQUAL))  &kp RA(EQUAL)  &kp RS(RA(MINUS))
                                   &trans     &kp LG(SPACE)         &trans                 &none  &none  &none
            >;

            label = "Symbols";
        };

        media_layer {
            bindings = <
&kp C_POWER   &none         &none         &none         &none         &none       &kp C_PREVIOUS  &kp C_PLAY_PAUSE  &kp C_NEXT  &kp K_MUTE  &kp C_VOLUME_DOWN  &kp C_VOL_UP
&caps_word    &none         &none         &none         &none         &none       &none           &none             &none       &kp UP      &caps_word         &kp LS(LA(LC(LG(SQT))))
&bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &bt BT_CLR  &sys_reset      &none             &kp LEFT    &kp DOWN    &kp RIGHT          &none
                                          &trans        &trans        &trans      &trans          &trans            &trans
            >;

            label = "Media";
        };

        game {
            bindings = <
&kp TAB    &kp Q  &kp W  &kp E  &kp R      &kp T    &kp Y    &kp U         &kp I         &kp O    &kp P     &kp LBKT
&kp LSHFT  &kp A  &kp S  &kp D  &kp F      &kp G    &kp H    &kp J         &kp K         &kp L    &kp SEMI  &kp SQT
&kp LCTRL  &kp Z  &kp X  &kp C  &kp V      &kp B    &kp N    &kp M         &kp COMMA     &kp DOT  &kp FSLH  &kp BSLH
                         &mo 1  &kp SPACE  &kp RET  &kp ESC  &kp LEFT_ALT  &kp LEFT_GUI
            >;
        };

        window {
            bindings = <
&none  &none  &none  &none  &none  &none  &none  &none  &mt LG(LC(LA(LS(I)))) LG(LC(LA(I)))          &mt LG(LC(LA(LS(UP)))) LA(LG(LC(UP)))      &mt LG(LC(LA(LS(P)))) LG(LC(LA(P)))          &none
&none  &none  &none  &none  &none  &none  &none  &none  &mt LG(LC(LA(LS(LEFT)))) LG(LC(LA(LEFT)))    &mt LG(LC(LA(LS(L)))) LG(LC(LA(L)))        &mt LG(LA(LC(LS(RIGHT)))) LG(LC(LA(RIGHT)))  &none
&none  &none  &none  &none  &none  &none  &none  &none  &mt LG(LC(LA(LS(COMMA)))) LG(LC(LA(COMMA)))  &mt LG(LC(LA(LS(DOWN)))) LG(LC(LA(DOWN)))  &mt LS(LA(LC(LG(SLASH)))) LA(LC(LG(SLASH)))  &none
                     &none  &none  &none  &none  &none  &none
            >;
        };
    };

    conditional_layers { compatible = "zmk,conditional-layers"; };
};
