/*
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

// Layers

#define DFLT   0
#define GAME   1
#define NUMB   2
#define SYMB   3
#define MEDIA  4
#define WINDW  5

&lt { quick_tap_ms = <200>; };

&mt {
    flavor = "balanced";
    hold-trigger-on-release;
};

&soft_off {
    hold-time-ms = <5000>; // Only turn off it the key is held for 5 seconds or longer.
};

/ {
    // INPUT configs {{{

    input_configs { compatible = "zmk,input-configs"; };

    // }}}

    chosen { zmk,matrix_transform = &default_transform; };

    combos {
        compatible = "zmk,combos";

        comma {
            bindings = <&comma_space>;
            key-positions = <26 27>;
            layers = <0>;
        };

        period {
            bindings = <&period_space>;
            key-positions = <27 28>;
            layers = <0>;
        };

        t_game {
            bindings = <&tog GAME>;
            key-positions = <35 24>;
            layers = <0 1>;
        };

        ch_lang {
            bindings = <&kp CAPS>;
            key-positions = <16 17>;
            layers = <0>;
            timeout-ms = <80>;
            require-prior-idle-ms = <80>;
        };

        caps_word {
            bindings = <&caps_word>;
            key-positions = <12 13>;
            timeout-ms = <80>;
            layers = <0>;
        };

        space {
            bindings = <&kp SPACE>;
            key-positions = <28 29>;
            layers = <0>;
        };

        sch {
            bindings = <&kp LA(I)>;
            key-positions = <8 9>;
        };

        harden_sign {
            bindings = <&kp LA(M)>;
            key-positions = <31 32>;
            layers = <0>;
        };

        yo {
            bindings = <&kp LA(T)>;
            key-positions = <4 5>;
            layers = <0>;
        };

        excl {
            bindings = <&kp N1>;
            key-positions = <1 13>;
            layers = <0>;
        };

        at {
            bindings = <&kp N2>;
            key-positions = <2 14>;
            layers = <0>;
        };

        hash {
            bindings = <&kp N3>;
            key-positions = <3 15>;
            layers = <0>;
        };

        doll {
            bindings = <&kp N4>;
            key-positions = <4 16>;
            layers = <0>;
        };

        percnt {
            bindings = <&kp N5>;
            key-positions = <17 5>;
            layers = <0>;
        };

        caret {
            bindings = <&kp N6>;
            key-positions = <6 18>;
        };

        questn {
            bindings = <&kp N7>;
            key-positions = <7 19>;
        };

        asterisk {
            bindings = <&kp N8>;
            key-positions = <8 20>;
        };

        lpar {
            bindings = <&kp N9>;
            key-positions = <9 21>;
        };

        rpar {
            bindings = <&kp N0>;
            key-positions = <10 22>;
        };

        dash {
            bindings = <&mt LA(LS(MINUS)) MINUS>;
            key-positions = <7 8>;
        };
    };

    macros {
        comma_space: comma_space {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(LC(COMMA)) &kp SPACE>;
            label = "COMMA_SPACE";
        };

        period_space: period_space {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(LA(PERIOD)) &kp SPACE>;
            label = "PERIOD_SPACE";
        };

        meh: meh {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(LC(LEFT_SHIFT))>;
            label = "MEH";
        };

        upd_fw_l: upd_fw {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(LC(LA(LS(NUMBER_1)))) &bootloader>;
            label = "UPD_FW";
        };

        upd_fw_r: upd_fw_r {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(LC(LA(LS(NUMBER_2)))) &bootloader>;
            label = "UPD_FW_R";
        };
    };

    behaviors {
        /omit-if-no-ref/

        cmd_f: cmd_f {
            compatible = "zmk,behavior-mod-morph";
            label = "CMD_F";
            bindings = <&mt LCMD F>, <&kp LG(F)>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL)>;
            keep-mods = <(MOD_LSFT|MOD_LALT)>;
        };

        soff: soft_off {
            compatible = "zmk,behavior-soft-off";
            #binding-cells = <0>;

            // split-peripheral-off-on-press;

            hold-time-ms = <2000>; // Only turn off it the key is held for 2 seconds or longer.
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&mt LS(LCMD) ESC          &kp Q         &kp W        &kp E               &kp R           &kp T           &kp Y             &kp U           &kp I               &kp O        &kp P            &kp BACKSLASH
&mt LA(LS(LC(LGUI))) TAB  &mt LSHIFT A  &mt LCTRL S  &mt LALT D          &mt LGUI F      &kp G           &kp H             &mt RCMD J      &mt RALT K          &mt RCTRL L  &mt RSHIFT SEMI  &mt LS(LA(LC(LCMD))) LBKT
&lt MEDIA GRAVE           &kp Z         &kp X        &kp C               &kp V           &kp B           &kp N             &kp M           &kp COMMA           &kp PERIOD   &kp SLASH        &lt MEDIA RBKT
                                                     &lt SYMB BACKSPACE  &lt NUMB SPACE  &mt LCMD ENTER  &mt RSHIFT ENTER  &lt NUMB SPACE  &lt SYMB BACKSPACE
            >;

            label = "Default";
        };

        game {
            bindings = <
&kp ESCAPE      &kp T      &kp Q  &kp W  &kp E      &kp R  &kp Y          &kp U         &kp I         &kp O    &kp P     &kp LBKT
&kp TAB         &kp LSHFT  &kp A  &kp S  &kp D      &kp F  &kp H          &kp J         &kp K         &kp L    &kp SEMI  &kp SQT
&lt NUMB ENTER  &kp LCTRL  &kp Z  &kp X  &kp C      &kp V  &kp N          &kp M         &kp COMMA     &kp DOT  &kp FSLH  &kp BSLH
                                  &kp B  &kp SPACE  &kp G  &kp BACKSPACE  &kp LEFT_ALT  &kp LEFT_GUI
            >;
        };

        num {
            bindings = <
&trans         &kp KP_MULTIPLY       &kp KP_N7        &kp KP_N8       &kp KP_N9       &kp KP_PLUS      &kp PG_UP  &kp LA(LEFT)  &kp UP    &kp LA(RIGHT)  &kp LG(LBKT)  &kp LG(RBKT)
&trans         &mt LSHIFT KP_DIVIDE  &mt LCTRL KP_N4  &mt LALT KP_N5  &mt LCMD KP_N6  &kp KP_SUBTRACT  &kp HOME   &kp LEFT      &kp DOWN  &kp RIGHT      &kp END       &none
&mt RBKT LBKT  &kp KP_NUMBER_0       &kp KP_N1        &kp KP_N2       &kp KP_N3       &kp EQUAL        &kp PG_DN  &kp LG(LEFT)  &none     &kp LG(RIGHT)  &none         &trans
                                                      &trans          &trans          &trans           &trans     &trans        &kp DEL
            >;

            label = "Numbers/Nav";
        };

        symb {
            bindings = <
&kp UNDER          &kp NUMBER_1       &kp NUMBER_2   &kp NUMBER_3           &kp NUMBER_4    &kp N5          &none  &none     &none     &none      &none      &none
&kp LA(LS(COMMA))  &kp NUMBER_6       &kp N7         &kp N8                 &kp N9          &kp N0          &none  &kp RGUI  &kp RALT  &kp RCTRL  &kp RSHFT  &none
&kp LA(LS(GRAVE))  &kp LS(LA(EQUAL))  &kp LS(LA(L))  &kp LS(LA(SEMICOLON))  &kp LA(LS(N9))  &kp LS(LA(N0))  &none  &none     &none     &none      &none      &none
                                                     &trans                 &kp LC(LA(F))   &trans          &none  &none     &none
            >;

            label = "Symbols/Pointer";
        };

        media {
            bindings = <
&kp C_POWER             &kp LS(LG(N1))     &kp LS(LG(N2))     &kp LG(LS(N3))     &kp LS(LG(N4))     &kp LS(LG(N5))     &kp C_PREVIOUS  &kp C_PLAY_PAUSE  &kp C_NEXT     &kp K_MUTE     &kp C_VOLUME_DOWN  &kp C_VOL_UP
&mt LC(RIGHT) LC(LEFT)  &mt LC(N6) LC(N1)  &mt LC(N7) LC(N2)  &mt LC(N8) LC(N3)  &mt LC(N9) LC(N4)  &mt LC(N0) LC(N5)  &bt BT_SEL 0    &bt BT_SEL 1      &bt BT_SEL 2   &bt BT_SEL 3   &bt BT_PRV         &bt BT_NXT
&none                   &kp LG(Z)          &kp LG(X)          &kp LG(C)          &kp LG(V)          &kp LS(LG(Z))      &bt BT_DISC 0   &bt BT_DISC 1     &bt BT_DISC 3  &bt BT_DISC 3  &none              &bt BT_CLR_ALL
                                                              &upd_fw_l          &bootloader        &sys_reset         &sys_reset      &bootloader       &upd_fw_r
            >;

            label = "Buttons/Media";
        };
    };

    conditional_layers { compatible = "zmk,conditional-layers"; };
};
