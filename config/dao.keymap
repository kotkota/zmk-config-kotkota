/*
 * SPDX-License-Identifier: MIT
 */

#define ZMK_MOUSE_DEFAULT_MOVE_VAL 2500  // 600

// #define ZMK_MOUSE_DEFAULT_SCRL_VAL 20    // 10

#include <dt-bindings/zmk/mouse.h>
#include <behaviors/mouse_keys.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

// Layers

#define DFLT   0
#define GAME   1
#define NUMB   2
#define SYMB   3
#define MEDIA  4
#define WINDW  5
#define ADJ    6

&mmv {
    time-to-max-speed-ms = <1000>;    // 300
};

&msc {
    acceleration-exponent = <1>;      // 0
    time-to-max-speed-ms = <50>;     // 300
};

&lt { quick_tap_ms = <200>; };

&mt {
    flavor = "tap-preferred";
    hold-trigger-on-release;
};

/ {
    // INPUT configs {{{

    input_configs {
        compatible = "zmk,input-configs";

        mmv {
            device = <&mmv>;
            scale-multiplier = <5>;
        };

        fmmv {
            device = <&fmmv>;
            scale-multiplier = <10>;
        };

        msc {
            device = <&msc>;
            scale-multiplier = <5>;
        };
    };

    // }}}

    chosen { zmk,matrix_transform = &default_transform; };

    combos {
        compatible = "zmk,combos";

        harden_sign {
            bindings = <&kp RBKT>;
            key-positions = <31 32>;
            layers = <0>;
        };

        comma {
            bindings = <&comma_space>;
            key-positions = <26 27>;
            layers = <0>;
        };

        period {
            bindings = <&period_space>;
            key-positions = <27 28>;
            layers = <0>;
        };

        t_game {
            bindings = <&tog GAME>;
            key-positions = <35 24>;
            layers = <0 1>;
        };

        ch_lang {
            bindings = <&kp LG(SPACE)>;
            key-positions = <16 15>;
            layers = <0>;
            timeout-ms = <80>;
            require-prior-idle-ms = <80>;
        };

        caps_word {
            bindings = <&caps_word>;
            key-positions = <12 13>;
            timeout-ms = <80>;
            layers = <0>;
        };

        space {
            bindings = <&kp SPACE>;
            key-positions = <28 29>;
            layers = <0>;
        };

        yo {
            bindings = <&kp NON_US_BACKSLASH>;
            key-positions = <6 7>;
            layers = <0>;
        };
    };

    macros {
        comma_space: comma_space {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(LC(COMMA)) &kp SPACE>;
            label = "COMMA_SPACE";
        };

        period_space: period_space {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(LA(PERIOD)) &kp SPACE>;
            label = "PERIOD_SPACE";
        };

        ctrl_num: ctrl_num {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&mo 2 &kp LCTRL>;
            label = "CTRL_NUM";
        };
    };

    behaviors {
        /omit-if-no-ref/

        fmmv: fast_mouse_move {
            compatible = "zmk,behavior-input-two-axis";
            #binding-cells = <1>;
            x-input-code = <INPUT_REL_X>;
            y-input-code = <INPUT_REL_Y>;
            time-to-max-speed-ms = <250>;
            acceleration-exponent = <1>;
        };

        cmd_f: cmd_f {
            compatible = "zmk,behavior-mod-morph";
            label = "CMD_F";
            bindings = <&mt LCMD F>, <&kp LG(F)>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL)>;
            keep-mods = <(MOD_LSFT|MOD_LALT)>;
        };

        kp_ctrl_num: kp_ctrl_num {
            compatible = "zmk,behavior-hold-tap";
            label = "KP_CTRL_NUM";
            bindings = <&ctrl_num>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <80>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&mt LS(LCMD) ESC  &kp Q         &kp W        &kp E               &kp R           &kp T                &kp Y                 &kp U           &kp I               &kp O        &kp P            &mt RBKT LBKT
&mt CAPS TAB      &mt LSHIFT A  &mt LCTRL S  &mt LALT D          &cmd_f          &mt LA(LC(COMMA)) G  &mt LA(LC(PERIOD)) H  &mt RCMD J      &mt RALT K          &mt RCTRL L  &mt RSHIFT SEMI  &lt WINDW APOS
&lt MEDIA GRAVE   &kp Z         &kp X        &kp C               &kp V           &kp B                &kp N                 &kp M           &kp COMMA           &kp PERIOD   &kp SLASH        &lt MEDIA BACKSLASH
                                             &lt SYMB BACKSPACE  &lt NUMB SPACE  &mt LCMD ENTER       &mt RCMD ENTER        &lt NUMB SPACE  &lt SYMB BACKSPACE
            >;

            label = "Default";
        };

        game {
            bindings = <
&kp TAB    &kp Q  &kp W  &kp E                &kp R      &kp T           &kp Y    &kp U         &kp I         &kp O    &kp P     &kp LBKT
&kp LSHFT  &kp A  &kp S  &kp D                &kp F      &kp G           &kp H    &kp J         &kp K         &kp L    &kp SEMI  &kp SQT
&kp LCTRL  &kp Z  &kp X  &kp C                &kp V      &kp B           &kp N    &kp M         &kp COMMA     &kp DOT  &kp FSLH  &kp BSLH
                         &lt MEDIA BACKSPACE  &kp SPACE  &lt NUMB ENTER  &kp ESC  &kp LEFT_ALT  &kp LEFT_GUI
            >;
        };

        num_layer {
            bindings = <
&trans         &kp N1               &kp N2        &kp N3        &kp N4             &kp N5      &kp PG_UP  &kp LA(LEFT)  &kp UP    &kp LA(RIGHT)  &kp LG(LBKT)  &kp LG(RBKT)
&trans         &mt LSHIFT NUMBER_6  &mt LCTRL N7  &mt LALT N8   &mt LCMD NUMBER_9  &kp N0      &kp PG_DN  &kp LEFT      &kp DOWN  &kp RIGHT      &none         &none
&kp KP_DIVIDE  &kp KP_MULTIPLY      &kp KP_PLUS   &kp KP_MINUS  &kp KP_EQUAL       &kp KP_DOT  &kp HOME   &kp END       &none     &none          &none         &trans
                                                  &trans        &trans             &trans      &trans     &trans        &kp DEL
            >;

            label = "Numbers/Nav";
        };

        symb_layer {
            bindings = <
&kp UNDER     &kp EXCL   &kp AT    &kp HASH   &kp DLLR              &kp PRCNT              &none      &msc SCRL_LEFT  &mmv MOVE_UP    &msc SCRL_RIGHT    &msc SCRL_UP    &none
&kp LA(SEMI)  &kp CARET  &kp AMPS  &kp ASTRK  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &none      &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT    &msc SCRL_DOWN  &none
&kp LT        &kp GT     &kp LBKT  &kp RBKT   &kp LEFT_BRACE        &kp RIGHT_BRACE        &none      &none           &none           &kp RS(RA(EQUAL))  &kp RA(EQUAL)   &kp RS(RA(MINUS))
                                   &trans     &kp LC(LA(F))         &mo ADJ                &mkp LCLK  &mkp MCLK       &mkp RCLK
            >;

            label = "Symbols";
        };

        media_layer {
            bindings = <
&kp C_POWER  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_CLR     &kp C_PREVIOUS  &kp C_PLAY_PAUSE  &kp C_NEXT  &kp K_MUTE  &kp C_VOLUME_DOWN  &kp C_VOL_UP
&none        &none         &none         &none         &none         &none          &none           &none             &none       &kp UP      &none              &kp LS(LA(LC(LG(SQT))))
&none        &kp LG(Z)     &kp LG(X)     &kp LG(C)     &kp LG(V)     &kp LS(LG(Z))  &none           &none             &kp LEFT    &kp DOWN    &kp RIGHT          &none
                                         &trans        &trans        &trans         &trans          &trans            &trans
            >;

            label = "Media/Buttons";
        };

        window {
            bindings = <
&none  &none  &none  &none  &none  &sys_reset   &sys_reset   &none  &mt LG(LC(LA(LS(I)))) LG(LC(LA(I)))          &mt LG(LC(LA(LS(UP)))) LA(LG(LC(UP)))      &mt LG(LC(LA(LS(P)))) LG(LC(LA(P)))          &none
&none  &none  &none  &none  &none  &bootloader  &bootloader  &none  &mt LG(LC(LA(LS(LEFT)))) LG(LC(LA(LEFT)))    &mt LG(LC(LA(LS(L)))) LG(LC(LA(L)))        &mt LG(LA(LC(LS(RIGHT)))) LG(LC(LA(RIGHT)))  &none
&none  &none  &none  &none  &none  &none        &none        &none  &mt LG(LC(LA(LS(COMMA)))) LG(LC(LA(COMMA)))  &mt LG(LC(LA(LS(DOWN)))) LG(LC(LA(DOWN)))  &mt LS(LA(LC(LG(SLASH)))) LA(LC(LG(SLASH)))  &none
                     &none  &none  &none        &none        &none  &none
            >;
        };

        adj_layer {
            bindings = <
&none  &none  &none  &none   &none   &none   &none      &msc SCRL_LEFT   &fmmv MOVE_UP    &msc SCRL_RIGHT   &msc SCRL_UP    &none
&none  &none  &none  &none   &none   &none   &none      &fmmv MOVE_LEFT  &fmmv MOVE_DOWN  &fmmv MOVE_RIGHT  &msc SCRL_DOWN  &none
&none  &none  &none  &none   &none   &none   &none      &kp N1           &none            &none             &none           &none
                     &trans  &trans  &trans  &mkp LCLK  &mkp MCLK        &mkp RCLK
            >;

            label = "Adjust";
        };
    };

    conditional_layers { compatible = "zmk,conditional-layers"; };
};
