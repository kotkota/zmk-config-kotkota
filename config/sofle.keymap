/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors/num_word.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define DFLT   0
#define GAME   2
#define NUMB   3
#define SYMB   4
#define STCKY  5
#define ADJST  6

&lt { quick_tap_ms = <200>; };

&mt {
    hold-trigger-on-release;
    flavor = "balanced";
    quick-tap-ms = <250>;
};

&soft_off { hold-time-ms = <2000>; };

&sk {
    release-after-ms = <2000>;
    quick-release;
};

&sl { release-after-ms = <2000>; };

/ {
    combos {
        compatible = "zmk,combos";

        ha {
            bindings = <&kp LBKT>;
            key-positions = <20 21>;
            layers = <0 1>;
            slow-release;
        };

        yo {
            bindings = <&kp BACKSLASH>;
            key-positions = <16 17>;
            layers = <0 1>;
            slow-release;
        };

        equal {
            bindings = <&mt PLUS EQUAL>;
            key-positions = <30 31>;
        };

        switch_ru {
            bindings = <&kp LG(LC(LA(LS(N))))>;
            key-positions = <28 31>;
            layers = <0 1>;
            timeout-ms = <80>;
            require-prior-idle-ms = <80>;
        };

        switch_en {
            bindings = <&kp LG(LC(LA(LS(M))))>;
            key-positions = <27 32>;
            timeout-ms = <80>;
            require-prior-idle-ms = <80>;
            layers = <0 1>;
        };

        comma {
            bindings = <&mt LC(LA(LS(COMMA))) LC(LA(COMMA))>;
            key-positions = <38 39>;
            layers = <0 1>;
            slow-release;
        };

        period {
            bindings = <&mt LC(LA(LS(PERIOD))) LC(LA(PERIOD))>;
            key-positions = <39 40>;
            layers = <0 1>;
            slow-release;
        };

        under_ellipsis {
            bindings = <&mt LA(SEMI) LS(MINUS)>;
            key-positions = <19 20>;
            layers = <0 1>;
            slow-release;
        };

        off {
            bindings = <&soft_off>;
            key-positions = <29 37>;
            layers = <0 1>;
        };

        game_tog {
            bindings = <&tog 2>;
            key-positions = <36 49>;
            layers = <0 2>;
        };

        quo {
            bindings = <&kp SINGLE_QUOTE>;
            key-positions = <45 46>;
        };

        dquo {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <46 47>;
            layers = <0 1>;
        };

        grave {
            bindings = <&kp GRAVE>;
            key-positions = <47 48>;
            slow-release;
            layers = <0 1>;
        };

        del {
            bindings = <&kp DEL>;
            key-positions = <20 21>;
            layers = <3>;
        };

        bsp {
            bindings = <&kp BSPC>;
            key-positions = <20 19>;
            layers = <3>;
        };

        copy_cut {
            bindings = <&mt LG(X) LG(C)>;
            key-positions = <14 15>;
        };

        paste {
            bindings = <&mt LA(LC(V)) LG(V)>;
            key-positions = <15 16>;
        };

        html_tag {
            bindings = <&mt LA(LS(LC(H))) LA(LS(H))>;
            key-positions = <28 29>;
            layers = <0 1>;
        };

        eq_quo {
            bindings = <&mt LA(LS(LC(J))) LA(LS(J))>;
            key-positions = <40 41>;
            layers = <0 1>;
        };

        dash {
            bindings = <&mt LA(LS(MINUS)) MINUS>;
            key-positions = <31 32>;
            layers = <0 1>;
        };

        excl {
            bindings = <&mt LA(N1) LS(N1)>;
            key-positions = <25 13>;
            layers = <0 1>;
        };

        at {
            bindings = <&mt LA(N2) LS(N2)>;
            key-positions = <26 14>;
            layers = <0 1>;
        };

        hash {
            bindings = <&mt LA(N3) LS(N3)>;
            key-positions = <27 15>;
            layers = <0 1>;
        };

        doll {
            bindings = <&mt LA(N4) LS(N4)>;
            key-positions = <28 16>;
            layers = <0 1>;
        };

        percnt {
            bindings = <&mt LA(N5) LS(N5)>;
            key-positions = <17 29>;
            layers = <0 1>;
        };

        caret {
            bindings = <&mt LA(N6) LS(N6)>;
            key-positions = <30 18>;
            layers = <0 1>;
        };

        question {
            bindings = <&mt LA(N7) LS(N7)>;
            key-positions = <31 19>;
            layers = <0 1>;
        };

        asterisk {
            bindings = <&mt LA(N8) LS(N8)>;
            key-positions = <32 20>;
            layers = <0 1>;
        };

        lpar {
            bindings = <&mt LA(N9) LS(N9)>;
            key-positions = <33 21>;
            layers = <0 1>;
        };

        rpar {
            bindings = <&mt LA(N0) LS(N0)>;
            key-positions = <34 22>;
            layers = <0 1>;
        };

        sticky {
            bindings = <&tog 1>;
            key-positions = <35 24>;
            layers = <0 1>;
        };
    };

    macros {
        period_space: period_space {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(LA(PERIOD)) &kp SPACE>;
            label = "PERIOD_SPACE";
        };

        comma_space: comma_space {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(LA(COMMA)) &kp SPACE>;
            label = "COMMA_SPACE";
        };

        upd_fw_l: upd_fw_l {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(LC(LA(LG(N1)))) &bootloader>;
            label = "UPD_FW_L";
        };

        upd_fw_r: upd_fw_r {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(LC(LA(LG(N2)))) &bootloader>;
            label = "UPD_FW_R";
        };

        equals_qoute: equals_qoute {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp EQUAL &kp DOUBLE_QUOTES &kp DOUBLE_QUOTES &kp LEFT>;
        };

        html_tag: html_tag {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LESS_THAN &kp SLASH &kp GREATER_THAN &kp LEFT>;
            label = "HTML_TAG";
        };

        period: period {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(LA(PERIOD))>;
            label = "PERIOD";
        };

        comma: comma {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(LA(COMMA))>;
            label = "COMMA";
        };
    };

    /*
* <0>    <1>    <2>    <3>    <4>    <5>              <6>    <7>    <8>    <9>    <10>   <11>
* <12>   <13>   <14>   <15>   <16>   <17>             <18>   <19>   <20>   <21>   <22>   <23>
* <24>   <25>   <26>   <27>   <28>   <29>             <30>   <31>   <32>   <33>   <34>   <35>
* <36>   <37>   <38>   <39>   <40>   <41>             <42>   <43>   <44>   <45>   <46>   <47>
*               <48>   <49>   <50>   <51> <52>   <53> <54>   <55>   <56>   <57>
*/

    behaviors {
        shft: shft {
            compatible = "zmk,behavior-tap-dance";
            label = "SHFT";
            #binding-cells = <0>;
            bindings = <&sk LEFT_SHIFT>, <&caps_word>;

            tapping-term-ms = <300>;
        };

        cmd_to_shift: cmd_to_shift {
            compatible = "zmk,behavior-mod-morph";
            label = "⌘F / ⇧";
            bindings = <&mt LCMD F>, <&mt LSHFT F>;

            #binding-cells = <0>;
            mods = <(MOD_LGUI)>;
            keep-mods = <(MOD_LGUI)>;
        };

        mtl: home-row-mods-left {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <180>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 34 35 44 45 46 47 48 49 52 53 54 55 56 57 58 59>;
        };

        mtr: home-row-mods-right {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <180>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38 39 40 41 37 50 51 52 53 54 55 56 57>;
        };

        smart_pp: smart_pp {
            compatible = "zmk,behavior-tap-dance";
            label = "SMART_PP";
            #binding-cells = <0>;
            bindings = <&kp C_PLAY_PAUSE>, <&kp C_NEXT>, <&kp C_PREV>;
        };

        swapper: swapper {
            compatible = "zmk,behavior-tri-state";// requires tri-state module (https://github.com/urob/zmk-tri-state)
            #binding-cells = <0>;
            bindings = <&kt LGUI>, <&kp TAB>, <&kt LGUI>;

            ignored-key-positions = <13 14 37 38 20 31 32 33>;// Arrows and BSPC, ENTER and DEL
        };

        tabber: tabber {
            compatible = "zmk,behavior-tri-state";
            #binding-cells = <0>;
            bindings = <&kt LCTRL>, <&kp TAB>, <&kt LCTRL>;

            ignored-key-positions = <13 14 40>;
            label = "TABBER";
        };

        smt: smt {
            compatible = "zmk,behavior-hold-tap";
            label = "SMT";
            bindings = <&sk>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <250>;
            flavor = "tap-preferred";
        };

        ls_a: ls_a {
            compatible = "zmk,behavior-tap-dance";
            label = "LS_A";
            #binding-cells = <0>;
            bindings = <&mtl LSHIFT A>, <&sk LSHIFT>;

            tapping-term-ms = <300>;
        };

        lc_s: lc_s {
            compatible = "zmk,behavior-tap-dance";
            label = "LC_S";
            #binding-cells = <0>;
            bindings = <&mtl LCTRL S>, <&sk LCTRL>;

            tapping-term-ms = <300>;
        };

        la_d: la_d {
            compatible = "zmk,behavior-tap-dance";
            label = "LA_D";
            #binding-cells = <0>;
            bindings = <&mtl LALT D>, <&sk LALT>;

            tapping-term-ms = <300>;
        };

        lg_f: lg_f {
            compatible = "zmk,behavior-tap-dance";
            label = "LG_F";
            #binding-cells = <0>;
            bindings = <&mtl LGUI F>, <&sk LGUI>;

            tapping-term-ms = <300>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {

            bindings = <
&kp ESC                          &kp N1        &kp N2        &kp N3                &kp N4       &kp N5                                            &kp N6       &kp N7       &kp N8                &kp N9        &kp N0           &kp BSPC
&mt LS(LC(LA(LG(SEMI)))) ESCAPE  &kp Q         &kp W         &kp E                 &kp R        &mt BACKSLASH T                                   &kp Y        &kp U        &kp I                 &kp O         &kp P            &kp LBKT
&mt LS(LC(LA(LGUI))) TAB         &mtl LSHFT A  &mtl LCTRL S  &mtl LALT D           &mtl LCMD F  &kp G                                             &kp H        &mtr RCMD J  &mtr RALT K           &mtr RCTRL L  &mtr RSHFT SEMI  &mt RA(RC(RS(RCMD))) SQT
&lt 6 GRAVE                      &mt CAPS Z    &kp X         &kp C                 &kp V        &kp B            &kp C_PLAY_PAUSE    &kp K_MUTE   &kp N        &mt RBKT M   &kp COMMA             &kp DOT       &mt CAPS SLASH   &lt 6 LS(LC(LA(LG(SEMICOLON))))
                                               &mt CAPS DEL  &kp LS(LC(LA(LCMD)))  &lt 4 BSPC   &lt 3 SPACE      &lt 5 ENTER         &lt 5 ENTER  &lt 3 SPACE  &lt 4 BSPC   &kp RS(RA(RC(RCMD)))  &mt CAPS DEL
            >;

            sensor-bindings = <&inc_dec_kp DOWN UP>, <&inc_dec_kp RIGHT LEFT>;

            display-name = "Default";
        };

        sticky_hrm {
            bindings = <
&trans                          &trans      &trans        &trans                &trans      &trans                                            &trans       &trans       &trans                &trans        &trans           &trans
&trans  &trans       &trans         &trans                 &trans       &trans                                   &trans        &trans        &trans                 &trans         &trans            &trans
&trans        &smt LSHFT A       &smt LCTRL S         &smt LALT D                 &smt LCMD F       &trans                                             &trans        &smt RCMD J  &smt RALT K           &smt RCTRL L  &smt RSHFT SEMI  &trans
&trans                      &trans  &trans         &trans                 &trans       &trans            &trans    &trans   &trans        &trans   &trans             &trans       &trans   &trans
                                             &trans  &trans  &trans  &trans      &trans         &trans  &trans  &trans   &trans  &trans
            >;

            sensor-bindings = <&inc_dec_kp DOWN UP>, <&inc_dec_kp RIGHT LEFT>;

            display-name = "sticky";
        };

        game {
            bindings = <
&kp ESC  &kp N1     &kp N2  &kp N3  &kp N4  &kp N5                        &kp N6  &kp N7  &kp N8     &kp N9   &kp N0    &kp MINUS
&kp T    &kp TAB    &kp Q   &kp W   &kp E   &kp R                         &kp Y   &kp U   &kp I      &kp O    &kp P     &kp EQUAL
&kp G    &kp LSHFT  &kp A   &kp S   &kp D   &kp F                         &kp H   &kp J   &kp K      &kp L    &kp SEMI  &kp LBKT
&kp B    &kp LCTRL  &kp Z   &kp X   &kp C   &kp V      &trans     &trans  &kp N   &kp M   &kp COMMA  &kp DOT  &kp FSLH  &kp RBKT
                    &kp I   &kp H   &kp G   &kp SPACE  &kp RET    &trans  &trans  &trans  &trans     &trans
            >;

            sensor-bindings =
                <&inc_dec_kp RBKT LBKT>,
                <&inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN>;

            display-name = "Game";
        };

        raise_layer {

          bindings = <
&trans  &none             &none         &none        &none        &none                              &none     &none            &none        &none          &none         &none
&trans  &num_word NUMB    &kp N7        &kp N8       &kp N9       &mt ASTRK PLUS                     &kp HOME  &kp LA(LEFT)     &kp UP       &kp LA(RIGHT)  &kp PG_UP     &none
&trans  &mt LSHIFT COLON  &mt LCTRL N4  &mt LALT N5  &mt LCMD N6  &mt SLASH MINUS                    &kp END   &kp LEFT         &kp DOWN     &kp RIGHT      &kp PG_DN     &none
&trans  &kp KP_EQUAL      &kp N1        &kp N2       &kp N3       &kp N0           &trans    &trans  &none     &kp LS(LC(TAB))  &kp LC(TAB)  &kp LG(LBKT)   &kp LG(RBKT)  &none
                          &kp LPAR      &kp RPAR     &kp KP_DOT   &trans           &trans    &trans  &trans    &trans           &trans       &trans
            >;

            sensor-bindings = <&inc_dec_kp RIGHT LEFT>, <&inc_dec_kp UP DOWN>;

            display-name = "Num / Nav";
        };

        lower_layer {

            bindings = <
&trans  &none           &none         &none          &none          &none                        &none      &none          &none           &none           &none           &none
&trans  &kp F1          &kp F2        &kp F3         &kp F4         &kp F5                       &kp F6     &kp F7         &kp F8          &kp F9          &kp F10         &none
&trans  &mt LSHFT EXCL  &mt LCTRL AT  &mt LALT HASH  &mt LCMD DLLR  &kp PRCNT                    &kp CARET  &mt RCMD AMPS  &mt RALT ASTRK  &mt RCTRL LPAR  &mt RSHFT RPAR  &none
&trans  &kp EQUAL       &kp LBKT     &kp RBKT    &kp LBRC       &kp RBRC   &trans    &trans  &kp MINUS   &kp KP_PLUS       &kp SEMI        &kp COLON       &kp BSLH        &none
                        &trans        &trans         &trans         &trans     &trans    &trans  &trans     &trans         &trans          &trans
            >;

            sensor-bindings =
                <&inc_dec_kp PG_DN PG_UP>,
                <&inc_dec_kp PG_UP PG_DN>;

            display-name = "Sym";
        };

        sticky {
            bindings = <
&none                 &none   &none         &none          &none        &none                                 &none   &none     &none     &none      &none      &none
&none                 &trans  &kp LG(LEFT)  &kp LG(RIGHT)  &kp LG(R)    &kp LG(T)                             &none   &none     &none     &none      &none      &none
&sk LS(LC(LA(LCMD)))  &shft   &sk LCTRL     &sk LALT       &sk LGUI     &none                                 &none   &sk RGUI  &sk RALT  &sk RCTRL  &sk RSHFT  &none
&none                 &kp Q   &kp GRAVE     &swapper       &kp LS(TAB)  &tabber         &kp K_MUTE    &trans  &none   &none     &none     &none      &none      &none
                              &trans        &trans         &trans       &num_word NUMB  &trans        &trans  &trans  &trans    &trans    &trans
            >;

            display-name = "Sticky";
            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

        adjust_layer {
            bindings = <
&none  &bt BT_SEL 0          &bt BT_SEL 1          &bt BT_SEL 3    &none           &bt BT_CLR                               &none        &none             &none       &none                 &none         &none
&none  &kp LG(LS(NUMBER_1))  &kp LS(LG(N2))        &kp LS(LG(N3))  &kp LS(LG(N4))  &kp LS(LG(N5))                           &kp C_PREV   &kp C_PLAY_PAUSE  &kp C_NEXT  &none                 &kp C_VOL_DN  &kp C_VOL_UP
&none  &none                 &none                 &none           &none           &none                                    &none        &sk RGUI          &sk RALT    &sk RCTRL             &sk RSHFT     &none
&none  &kp LG(Z)             &kp LG(LS(Z))         &none           &none           &none           &kp K_MUTE    &none      &none        &none             &none       &none                 &none         &none
                             &sk LS(LC(LA(LCMD)))  &sk CAPS        &sys_reset      &bootloader     &upd_fw_l     &upd_fw_r  &bootloader  &sys_reset        &sk CAPS    &sk RA(RC(RS(RCMD)))
            >;

            sensor-bindings =
                <&inc_dec_kp C_VOL_UP C_VOL_DN>,
                <&inc_dec_kp UP_ARROW DOWN>;

            display-name = "Adjust";
        };
    };
};
