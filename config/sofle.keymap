/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define BASE 0
#define LOWER 1
#define RAISE 2
#define ADJST 3

&mt {
    flavor = "balanced";
    hold-trigger-on-release;
    require-prior-idle-ms = <100>;
};

&soft_off { hold-time-ms = <2000>; };

/ {
    // Activate ADJST layer by pressing raise and lower
    // conditional_layers {
    //     compatible = "zmk,conditional-layers";
    //     adjst_layer {
    //         if-layers = <LOWER RAISE>;
    //         then-layer = <ADJST>;
    //     };
    // };

    combos {
        compatible = "zmk,combos";

        sch {
            bindings = <&kp LA(I)>;
            key-positions = <20 21>;
            layers = <0>;
        };

        tone {
            bindings = <&kp LA(M)>;
            key-positions = <45 46>;
            layers = <0>;
        };

        yo {
            bindings = <&kp LA(T)>;
            key-positions = <16 17>;
            layers = <0>;
        };

        space {
            bindings = <&kp LA(SPACE)>;
            key-positions = <40 41>;
            layers = <0>;
        };

        dash {
            bindings = <&mt LA(LS(MINUS)) MINUS>;
            key-positions = <31 32>;
            layers = <0>;
        };

        ch_lang {
            bindings = <&kp CAPS>;
            key-positions = <28 31>;
            layers = <0>;
        };

        comma_sp {
            bindings = <&comma_space>;
            key-positions = <38 39>;
            layers = <0>;
        };

        period_sp {
            bindings = <&period_space>;
            key-positions = <39 40>;
            layers = <0>;
        };

        under_ellipsis {
            bindings = <&mt LS(LA(COMMA)) LS(MINUS)>;
            key-positions = <19 20>;
            layers = <0>;
        };

        off {
            bindings = <&soft_off>;
            key-positions = <29 37>;
            layers = <0>;
        };

        game_tog {
            bindings = <&tog 1>;
            key-positions = <36 49>;
            layers = <0 1>;
        };

        double_q {
            bindings = <&kp LS(GRAVE)>;
            key-positions = <46 47>;
        };

        grave {
            bindings = <&kp LA(GRAVE)>;
            key-positions = <47 48>;
        };

        del {
            bindings = <&kp DEL>;
            key-positions = <19 20>;
            layers = <2>;
        };

        bsp {
            bindings = <&kp BSPC>;
            key-positions = <19 18>;
            layers = <2>;
        };
    };

    macros {
        period_space: period_space {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(LA(PERIOD)) &kp SPACE>;
            label = "PERIOD_SPACE";
        };

        comma_space: comma_space {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(LA(COMMA)) &kp SPACE>;
            label = "COMMA_SPACE";
        };

        upd_fw_l: upd_fw_l {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(LC(LA(LG(N1)))) &bootloader>;
            label = "UPD_FW_L";
        };

        upd_fw_r: upd_fw_r {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(LC(LA(LG(N2)))) &bootloader>;
            label = "UPD_FW_R";
        };

        upd_fw_rr: upd_fw {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(LC(LA(LG(N2))))>;
            label = "UPD_FW";
        };
    };

    behaviors {
        shft: shft {
            compatible = "zmk,behavior-tap-dance";
            label = "SHFT";
            #binding-cells = <0>;
            bindings = <&kp CAPS>, <&caps_word>;
        };

        qlt: qlt {
            compatible = "zmk,behavior-hold-tap";
            label = "QLT";
            bindings = <&mo>, <&none>;

            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <350>;
        };

        cmd_to_shift: cmd_to_shift {
            compatible = "zmk,behavior-mod-morph";
            label = "⌘F / ⇧";
            bindings = <&mt LCMD F>, <&mt LSHFT F>;

            #binding-cells = <0>;
            mods = <(MOD_LGUI)>;
            keep-mods = <(MOD_LGUI)>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // ------------------------------------------------------------------------------------------------------------
            // |  `    |  1  |  2  |  3   |  4   |  5   |                   |  6   |  7    |  8    |  9   |   0   |       |
            // |  ESC  |  Q  |  W  |  E   |  R   |  T   |                   |  Y   |  U    |  I    |  O   |   P   | BKSPC |
            // |  TAB  |  A  |  S  |  D   |  F   |  G   |                   |  H   |  J    |  K    |  L   |   ;   |   '   |
            // | SHIFT |  Z  |  X  |  C   |  V   |  B   |  MUTE  |  |       |  N   |  M    |  ,    |  .   |   /   | SHIFT |
            //               | GUI | ALT  | CTRL | LOWER|  ENTER |  | SPACE | RAISE| CTRL  | ALT   | GUI  |

            bindings = <
&kp ESC                   &kp N1       &kp N2         &kp N3      &kp N4         &kp N5                                           &kp N6       &kp N7      &kp N8      &kp N9         &kp N0          &kp BACKSPACE
&mt LS(LCMD) CAPS         &kp Q        &kp W          &kp E       &kp R          &kp T                                            &kp Y        &kp U       &kp I       &kp O          &kp P           &kp BACKSLASH
&mt LS(LA(LC(LCMD))) TAB  &mt LSHFT A  &mt LCTRL S    &mt LALT D  &cmd_to_shift  &kp G                                            &kp H        &mt RCMD J  &mt RALT K  &mt RCTRL L    &mt RSHFT SEMI  &mt RS(RA(RC(RCMD))) LEFT_BRACKET
&lt 4 GRAVE               &kp Z        &kp X          &kp C       &kp V          &kp B        &kp C_PLAY_PAUSE    &kp K_MUTE      &kp N        &kp M       &kp COMMA   &kp DOT        &kp SLASH       &lt 4 RIGHT_BRACKET
                                       &mt LCTRL DEL  &kp LALT    &lt 3 BSPC     &lt 2 SPACE  &mt LCMD ENTER      &mt RCMD ENTER  &lt 2 SPACE  &lt 3 BSPC  &kp RALT    &mt RCTRL DEL
            >;

            sensor-bindings = <&inc_dec_kp DOWN UP>, <&inc_dec_kp RIGHT LEFT>;
        };

        game {
            bindings = <
&kp ESC  &kp N1     &kp N2  &kp N3  &kp N4  &kp N5                        &kp N6  &kp N7  &kp N8     &kp N9   &kp N0    &kp MINUS
&kp T    &kp TAB    &kp Q   &kp W   &kp E   &kp R                         &kp Y   &kp U   &kp I      &kp O    &kp P     &kp EQUAL
&kp G    &kp LSHFT  &kp A   &kp S   &kp D   &kp F                         &kp H   &kp J   &kp K      &kp L    &kp SEMI  &kp LBKT
&kp B    &kp LCTRL  &kp Z   &kp X   &kp C   &kp V      &trans     &trans  &kp N   &kp M   &kp COMMA  &kp DOT  &kp FSLH  &kp RBKT
                    &kp I   &kp H   &kp G   &kp SPACE  &kp RET    &trans  &trans  &trans  &trans     &trans
            >;

            sensor-bindings = <&inc_dec_kp RBKT LBKT>;
        };

        raise_layer {
            // ------------------------------------------------------------------------------------------------------------
            // |BTCLR| BT1  | BT2  |  BT3  |  BT4  |  BT5 |                |      |      |       |      |       |       |
            // |     | INS  | PSCR | GUI   |       |      |                | PGUP |      |   ^   |      |       |       |
            // |     | ALT  | CTRL | SHIFT |       | CAPS |                | PGDN |   <- |   v   |  ->  |  DEL  | BKSPC |
            // |     | UNDO | CUT  | COPY  | PASTE |      |      |  |      |      |      |       |      |       |       |
            //              |      |       |       |      |      |  |      |      |      |       |      |

            bindings = <
&trans  &none               &none                  &none                 &none           &none                        &none     &none         &none     &none          &none         &none
&none   &kp KP_MULTIPLY     &kp KP_N7              &kp KP_N8             &kp KP_N9       &kp PLUS                     &kp HOME  &kp LA(LEFT)  &kp UP    &kp LA(RIGHT)  &kp PG_UP     &trans
&none   &mt LSHFT KP_SLASH  &mt LCTRL KP_NUMBER_4  &mt LALT KP_NUMBER_5  &mt LCMD KP_N6  &kp MINUS                    &kp END   &kp LEFT      &kp DOWN  &kp RIGHT      &kp PG_DN     &none
&trans  &kp KP_EQUAL        &kp KP_N1              &kp KP_N2             &kp KP_N3       &kp KP_N0  &trans    &trans  &none     &none         &none     &kp LG(LBKT)   &kp LG(RBKT)  &trans
                            &trans                 &trans                &trans          &trans     &trans    &trans  &trans    &trans        &trans    &trans
            >;

            sensor-bindings = <&inc_dec_kp RIGHT LEFT>, <&inc_dec_kp UP DOWN>;
        };

        lower_layer {
            // TODO: Some binds are waiting for shifted keycode support.
            // ------------------------------------------------------------------------------------------------------------
            // |       |  F1 |  F2 |  F3  |  F4  |  F5  |                   |  F6  |  F7   |  F8   |  F9  |  F10  |  F11  |
            // | `     |   1 |   2 |   3  |   4  |   5  |                   |   6  |   7   |   8   |   9  |    0  |  F12  |
            // |       |  !  |  @  |  #   |   $  |   %  |                   |  ^   |  &    |  *    |  (   |   )   |   |   |
            // |       |  =  |  -  |  +   |   {  |   }  |        |  |       |  [   |  ]    |  ;    |  :   |   \   |       |
            //               |     |      |      |      |        |  |       |      |       |       |      |

            bindings = <
&trans     &kp F1     &kp F2     &kp F3       &kp F4    &kp F5                       &kp F6     &kp F7    &kp F8     &kp F9     &kp F10   &kp F11
&kp GRAVE  &kp N1     &kp N2     &kp N3       &kp N4    &kp N5                       &kp N6     &kp N7    &kp N8     &kp N9     &kp N0    &kp F12
&trans     &kp EXCL   &kp AT     &kp HASH     &kp DLLR  &kp PRCNT                    &kp CARET  &kp AMPS  &kp ASTRK  &kp LPAR   &kp RPAR  &kp PIPE
&trans     &kp EQUAL  &kp MINUS  &kp KP_PLUS  &kp LBRC  &kp RBRC   &trans    &trans  &kp LBKT   &kp RBKT  &kp SEMI   &kp COLON  &kp BSLH  &trans
                      &trans     &trans       &trans    &trans     &trans    &trans  &trans     &trans    &trans     &trans
            >;

            sensor-bindings =
                <&inc_dec_kp PG_DN PG_UP>,
                <&inc_dec_kp PG_UP PG_DN>;
        };

        adjust_layer {
            bindings = <
&bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4                           &kp C_PREV    &kp C_PLAY  &kp C_NEXT   &kp K_MUTE  &kp C_VOL_DN     &kp C_VOL_UP
&none       &none         &none         &none         &none         &none                                  &kp KP_PLUS   &kp KP_N7   &kp KP_N8    &kp KP_N9   &kp KP_MULTIPLY  &kp BSPC
&none       &none         &none         &none         &none         &none                                  &kp KP_MINUS  &kp KP_N4   &kp KP_N5    &kp KP_N6   &kp KP_DIVIDE    &none
&none       &none         &none         &none         &none         &none         &kp K_MUTE    &none      &kp KP_N0     &kp KP_N1   &kp KP_N2    &kp KP_N3   &kp KP_EQUAL     &none
                          &sys_reset    &bootloader   &none         &upd_fw_rr    &upd_fw_l     &kp ENTER  &kp LBKT      &kp RBKT    &bootloader  &sys_reset
            >;

            sensor-bindings =
                <&inc_dec_kp C_VOL_UP C_VOL_DN>,
                <&inc_dec_kp UP_ARROW DOWN>;
        };
    };
};
