/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors/num_word.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define DFLT   0
#define GAME   1
#define NUMB   2
#define SYMB   3
#define STCKY  4
#define ADJST  5

&lt { quick_tap_ms = <200>; };

&mt {
    hold-trigger-on-release;
    flavor = "balanced";
    quick-tap-ms = <250>;
};

&soft_off { hold-time-ms = <2000>; };

&sk {
    release-after-ms = <2000>;
    quick-release;
};

&sl { release-after-ms = <2000>; };

/ {
    combos {
        compatible = "zmk,combos";

        ha {
            bindings = <&kp LBKT>;
            key-positions = <20 21>;
            layers = <0>;
            slow-release;
        };

        yo {
            bindings = <&kp BACKSLASH>;
            key-positions = <16 17>;
            layers = <0>;
            slow-release;
        };

        equal {
            bindings = <&mt PLUS EQUAL>;
            key-positions = <30 31>;
        };

        switch_ru {
            bindings = <&kp LG(LC(LA(LS(N))))>;
            key-positions = <28 31>;
            layers = <0>;
            timeout-ms = <80>;
            require-prior-idle-ms = <80>;
        };

        switch_en {
            bindings = <&kp LG(LC(LA(LS(M))))>;
            key-positions = <27 32>;
            timeout-ms = <80>;
            require-prior-idle-ms = <80>;
            layers = <0>;
        };

        comma {
            bindings = <&smart_comma 0 0>;
            key-positions = <38 39>;
            layers = <0>;
            slow-release;
        };

        period {
            bindings = <&smart_period 0 0>;
            key-positions = <39 40>;
            layers = <0>;
            slow-release;
        };

        under_ellipsis {
            bindings = <&mt LA(SEMI) LS(MINUS)>;
            key-positions = <19 20>;
            layers = <0>;
            slow-release;
        };

        off {
            bindings = <&soft_off>;
            key-positions = <29 37>;
            layers = <0>;
        };

        game_tog {
            bindings = <&tog 1>;
            key-positions = <36 49>;
            layers = <0 1>;
        };

        quo {
            bindings = <&kp SINGLE_QUOTE>;
            key-positions = <45 46>;
        };

        dquo {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <46 47>;
            layers = <0>;
        };

        grave {
            bindings = <&kp GRAVE>;
            key-positions = <47 48>;
            slow-release;
            layers = <0>;
        };

        del {
            bindings = <&kp DEL>;
            key-positions = <20 21>;
            layers = <2>;
        };

        bsp {
            bindings = <&kp BSPC>;
            key-positions = <20 19>;
            layers = <2>;
        };

        copy_cut {
            bindings = <&mt LG(X) LG(C)>;
            key-positions = <14 15>;
        };

        paste {
            bindings = <&mt LA(LC(V)) LG(V)>;
            key-positions = <15 16>;
        };

        html_tag {
            bindings = <&html_tag>;
            key-positions = <28 29>;
            layers = <0>;
        };

        eq_quo {
            bindings = <&equals_qoute>;
            key-positions = <40 41>;
            layers = <0>;
        };

        dash {
            bindings = <&mt LA(LS(MINUS)) MINUS>;
            key-positions = <31 32>;
            layers = <0>;
        };

        esc {
            bindings = <&kp ESC>;
            key-positions = <13 14>;
        };

        tab {
            bindings = <&kp TAB>;
            key-positions = <25 26>;
        };

        sh_tab {
            bindings = <&kp LS(TAB)>;
            key-positions = <38 37>;
        };
    };

    macros {
        period_space: period_space {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(LA(PERIOD)) &kp SPACE>;
            label = "PERIOD_SPACE";
        };

        comma_space: comma_space {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(LA(COMMA)) &kp SPACE>;
            label = "COMMA_SPACE";
        };

        upd_fw_l: upd_fw_l {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(LC(LA(LG(N1)))) &bootloader>;
            label = "UPD_FW_L";
        };

        upd_fw_r: upd_fw_r {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(LC(LA(LG(N2)))) &bootloader>;
            label = "UPD_FW_R";
        };

        equals_qoute: equals_qoute {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp EQUAL &kp DOUBLE_QUOTES &kp DOUBLE_QUOTES &kp LEFT>;
        };

        html_tag: html_tag {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LESS_THAN &kp BACKSLASH &kp GREATER_THAN &kp LEFT>;
            label = "HTML_TAG";
        };

        period: period {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(LA(PERIOD))>;
            label = "PERIOD";
        };

        comma: comma {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(LA(COMMA))>;
            label = "COMMA";
        };

        excl {
            bindings = <&kp N1>;
            key-positions = <25 13>;
            layers = <0>;
        };

        at {
            bindings = <&kp N2>;
            key-positions = <26 14>;
            layers = <0>;
        };

        hash {
            bindings = <&kp N3>;
            key-positions = <27 15>;
            layers = <0>;
        };

        doll {
            bindings = <&kp N4>;
            key-positions = <28 16>;
            layers = <0>;
        };

        percnt {
            bindings = <&kp N5>;
            key-positions = <17 29>;
            layers = <0>;
        };

        caret {
            bindings = <&kp N6>;
            key-positions = <30 18>;
        };

        question {
            bindings = <&kp N7>;
            key-positions = <31 19>;
        };

        asterisk {
            bindings = <&kp N8>;
            key-positions = <32 20>;
        };

        lpar {
            bindings = <&kp N9>;
            key-positions = <33 21>;
        };

        rpar {
            bindings = <&kp N0>;
            key-positions = <34 22>;
        };

    };
/*
* <0>    <1>    <2>    <3>    <4>    <5>              <6>    <7>    <8>    <9>    <10>   <11>
* <12>   <13>   <14>   <15>   <16>   <17>             <18>   <19>   <20>   <21>   <22>   <23>
* <24>   <25>   <26>   <27>   <28>   <29>             <30>   <31>   <32>   <33>   <34>   <35>
* <36>   <37>   <38>   <39>   <40>   <41>             <42>   <43>   <44>   <45>   <46>   <47>
*               <48>   <49>   <50>   <51> <52>   <53> <54>   <55>   <56>   <57>
*/
    behaviors {
        shft: shft {
            compatible = "zmk,behavior-tap-dance";
            label = "SHFT";
            #binding-cells = <0>;
            bindings = <&kp CAPS>, <&caps_word>;
        };

        qlt: qlt {
            compatible = "zmk,behavior-hold-tap";
            label = "QLT";
            bindings = <&mo>, <&none>;

            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <350>;
        };

        cmd_to_shift: cmd_to_shift {
            compatible = "zmk,behavior-mod-morph";
            label = "⌘F / ⇧";
            bindings = <&mt LCMD F>, <&mt LSHFT F>;

            #binding-cells = <0>;
            mods = <(MOD_LGUI)>;
            keep-mods = <(MOD_LGUI)>;
        };

        mtl: home-row-mods-left {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <180>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 40 41 39 38 37 36 12 24>;
        };

        mtr: home-row-mods-right {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <180>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38 39 40 41>;
        };

        smart_period: smart_period {
            compatible = "zmk,behavior-hold-tap";
            label = "SMART_PERIOD";
            bindings = <&period_space>, <&period>;

            #binding-cells = <2>;
            tapping-term-ms = <180>;
        };

        smart_comma: smart_comma {
            compatible = "zmk,behavior-hold-tap";
            label = "SMART_COMMA";
            bindings = <&comma_space>, <&comma>;

            #binding-cells = <2>;
            tapping-term-ms = <180>;
        };

        smart_pp: smart_pp {
            compatible = "zmk,behavior-tap-dance";
            label = "SMART_PP";
            #binding-cells = <0>;
            bindings = <&kp C_PLAY_PAUSE>, <&kp C_NEXT>, <&kp C_PREV>;
        };

        swapper: swapper {
            compatible = "zmk,behavior-tri-state";// requires tri-state module (https://github.com/urob/zmk-tri-state)
            #binding-cells = <0>;
            bindings = <&kt LGUI>, <&kp TAB>, <&kt LGUI>;

            ignored-key-positions = <13 14 20 31 32 33>;// Arrows and BSPC, ENTER and DEL
        };

        sw_esc_q: sw_esc_q {
            compatible = "zmk,behavior-mod-morph";
            bindings = <&kp ESC>, <&kp Q>;

            #binding-cells = <0>;
            mods = <(MOD_LGUI)>;
            keep-mods = <(MOD_LGUI)>;
            label = "SW_ESC_Q";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // ------------------------------------------------------------------------------------------------------------
            // |  `    |  1  |  2  |  3   |  4   |  5   |                   |  6   |  7    |  8    |  9   |   0   |       |
            // |  ESC  |  Q  |  W  |  E   |  R   |  T   |                   |  Y   |  U    |  I    |  O   |   P   | BKSPC |
            // |  TAB  |  A  |  S  |  D   |  F   |  G   |                   |  H   |  J    |  K    |  L   |   ;   |   '   |
            // | SHIFT |  Z  |  X  |  C   |  V   |  B   |  MUTE  |  |       |  N   |  M    |  ,    |  .   |   /   | SHIFT |
            //               | GUI | ALT  | CTRL | LOWER|  ENTER |  | SPACE | RAISE| CTRL  | ALT   | GUI  |

            bindings = <
&none  &none        &none         &none                 &none          &none                                             &none        &none       &none                 &none         &none           &none
&none  &kp Q        &kp W         &kp E                 &kp R          &mt BACKSLASH T                                   &kp Y        &kp U       &kp I                 &kp O         &kp P           &none
&none  &mt LSHFT A  &mt LCTRL S   &mt LALT D            &cmd_to_shift  &kp G                                             &kp H        &mt RCMD J  &mt RALT K            &mt RCTRL L   &mt RSHFT SEMI  &none
&none  &lt 5 Z      &kp X         &kp C                 &kp V          &kp B            &kp C_PLAY_PAUSE    &kp K_MUTE   &kp N        &mt RBKT M  &kp COMMA             &kp DOT       &lt 5 SLASH     &none
                    &mt CAPS DEL  &kp LS(LC(LA(LCMD)))  &lt 3 BSPC     &lt 2 SPACE      &lt 4 ENTER         &lt 4 ENTER  &lt 2 SPACE  &lt 3 BSPC  &kp RS(RA(RC(RCMD)))  &mt CAPS DEL
            >;

            sensor-bindings = <&inc_dec_kp DOWN UP>, <&inc_dec_kp RIGHT LEFT>;

            display-name = "Default";
        };

        game {
            bindings = <
&kp ESC  &kp N1     &kp N2  &kp N3  &kp N4  &kp N5                        &kp N6  &kp N7  &kp N8     &kp N9   &kp N0    &kp MINUS
&kp T    &kp TAB    &kp Q   &kp W   &kp E   &kp R                         &kp Y   &kp U   &kp I      &kp O    &kp P     &kp EQUAL
&kp G    &kp LSHFT  &kp A   &kp S   &kp D   &kp F                         &kp H   &kp J   &kp K      &kp L    &kp SEMI  &kp LBKT
&kp B    &kp LCTRL  &kp Z   &kp X   &kp C   &kp V      &trans     &trans  &kp N   &kp M   &kp COMMA  &kp DOT  &kp FSLH  &kp RBKT
                    &kp I   &kp H   &kp G   &kp SPACE  &kp RET    &trans  &trans  &trans  &trans     &trans
            >;

            sensor-bindings =
                <&inc_dec_kp RBKT LBKT>,
                <&inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN>;

            display-name = "Game";
        };

        raise_layer {
            // ------------------------------------------------------------------------------------------------------------
            // |BTCLR| BT1  | BT2  |  BT3  |  BT4  |  BT5 |                |      |      |       |      |       |       |
            // |     | INS  | PSCR | GUI   |       |      |                | PGUP |      |   ^   |      |       |       |
            // |     | ALT  | CTRL | SHIFT |       | CAPS |                | PGDN |   <- |   v   |  ->  |  DEL  | BKSPC |
            // |     | UNDO | CUT  | COPY  | PASTE |      |      |  |      |      |      |       |      |       |       |
            //              |      |       |       |      |      |  |      |      |      |       |      |

            bindings = <
&none   &none           &none                  &none                 &none           &none                              &none     &none            &none        &none          &none         &none
&none   &kp ESC         &kp KP_N7              &kp KP_N8             &kp KP_N9       &mt ASTRK PLUS                     &kp HOME  &kp LA(LEFT)     &kp UP       &kp LA(RIGHT)  &kp PG_UP     &none
&none   &mt LSHFT TAB   &mt LCTRL KP_NUMBER_4  &mt LALT KP_NUMBER_5  &mt LCMD KP_N6  &mt SLASH MINUS                    &kp END   &kp LEFT         &kp DOWN     &kp RIGHT      &kp PG_DN     &none
&trans  &num_word NUMB  &kp KP_N1              &kp KP_N2             &kp KP_N3       &kp KP_N0        &trans    &trans  &none     &kp LS(LC(TAB))  &kp LC(TAB)  &kp LG(LBKT)   &kp LG(RBKT)  &none
                        &kp LPAR               &kp RPAR              &kp KP_EQUAL    &trans           &trans    &trans  &trans    &trans           &trans       &trans
            >;

            sensor-bindings = <&inc_dec_kp RIGHT LEFT>, <&inc_dec_kp UP DOWN>;

            display-name = "Num / Nav";
        };

        lower_layer {
            // TODO: Some binds are waiting for shifted keycode support.
            // ---------------------------------------4---------------------------------------------------------------------
            // |       |  F1 |  F2 |  F3  |  F4  |  F5  |                   |  F6  |  F7   |  F8   |  F9  |  F10  |  F11  |
            // | `     |   1 |   2 |   3  |   4  |   5  |                   |   6  |   7   |   8   |   9  |    0  |  F12  |
            // |       |  !  |  @  |  #   |   $  |   %  |                   |  ^   |  &    |  *    |  (   |   )   |   |   |
            // |       |  =  |  -  |  +   |   {  |   }  |        |  |       |  [   |  ]    |  ;    |  :   |   \   |       |
            //               |     |      |      |      |        |  |       |      |       |       |      |

            bindings = <
&trans     &kp F1          &kp F2        &kp F3         &kp F4         &kp F5                       &kp F6     &kp F7         &kp F8          &kp F9          &kp F10         &kp F11
&kp GRAVE  &kp N1          &kp N2        &kp N3         &kp N4         &kp N5                       &kp N6     &kp N7         &kp N8          &kp N9          &kp N0          &kp F12
&trans     &mt LSHFT EXCL  &mt LCTRL AT  &mt LALT HASH  &mt LCMD DLLR  &kp PRCNT                    &kp CARET  &mt RCMD AMPS  &mt RALT ASTRK  &mt RCTRL LPAR  &mt RSHFT RPAR  &none
&trans     &kp EQUAL       &kp MINUS     &kp KP_PLUS    &kp LBRC       &kp RBRC   &trans    &trans  &kp LBKT   &kp RBKT       &kp SEMI        &kp COLON       &kp BSLH        &trans
                           &trans        &trans         &trans         &trans     &trans    &trans  &trans     &trans         &trans          &trans
            >;

            sensor-bindings =
                <&inc_dec_kp PG_DN PG_UP>,
                <&inc_dec_kp PG_UP PG_DN>;

            display-name = "Sym";
        };

        Sticky {
            bindings = <
&trans  &trans     &trans     &trans    &trans     &trans                                  &trans  &trans    &trans    &trans     &trans     &trans
&trans  &sw_esc_q  &kp GRAVE  &swapper  &kp LG(R)  &kp LG(T)                               &trans  &trans    &trans    &trans     &trans     &trans
&trans  &sk LSHFT  &sk LCTRL  &sk LALT  &sk LGUI   &kp LG(G)                               &trans  &sk RGUI  &sk RALT  &sk RCTRL  &sk RSHFT  &trans
&trans  &none      &trans     &trans    &trans     &sk LS(LC(LA(LCMD)))  &trans    &trans  &trans  &trans    &trans    &trans     &trans     &trans
                   &trans     &trans    &trans     &trans                &trans    &trans  &trans  &trans    &trans    &trans
            >;

            display-name = "Sticky";
        };

        adjust_layer {
            bindings = <
&none  &bt BT_SEL 0          &bt BT_SEL 1          &bt BT_SEL 3    &none           &bt BT_CLR                               &none        &none             &none       &none                 &none         &none
&none  &kp LG(LS(NUMBER_1))  &kp LS(LG(N2))        &kp LS(LG(N3))  &kp LS(LG(N4))  &kp LS(LG(N5))                           &kp C_PREV   &kp C_PLAY_PAUSE  &kp C_NEXT  &kp C_VOL_DN          &kp C_VOL_UP  &none
&none  &sk LSHFT             &sk LCTRL             &sk LALT        &sk LGUI        &none                                    &none        &sk RGUI          &sk RALT    &sk RCTRL             &sk RSHFT     &none
&none  &none                 &kp LG(Z)             &kp LS(LG(Z))   &none           &none           &kp K_MUTE    &none      &none        &none             &none       &none                 &none         &none
                             &sk LS(LC(LA(LCMD)))  &sk CAPS        &sys_reset      &bootloader     &upd_fw_l     &upd_fw_r  &bootloader  &sys_reset        &sk CAPS    &sk RA(RC(RS(RCMD)))
            >;

            sensor-bindings =
                <&inc_dec_kp C_VOL_UP C_VOL_DN>,
                <&inc_dec_kp UP_ARROW DOWN>;

            display-name = "Adjust";
        };
    };
};
